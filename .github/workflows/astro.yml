# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Complete Farmer Website v5

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Add repository_dispatch event to handle Prismic webhook
  repository_dispatch:
    types: [prismic-content-update]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."
  SOURCE_DIR: './dist'
  FMS_API: ${{ secrets.FMS_API }}
  BOT_PASS: ${{ secrets.BOT_PASS }}
  BOT_EMAIL: ${{ secrets.BOT_EMAIL }}
  PUBLIC_ENV: ${{ secrets.PUBLIC_ENV }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  PUBLIC_AUTH_API: ${{ secrets.PUBLIC_AUTH_API }}
  PUBLIC_AWS_REGION: ${{ secrets.PUBLIC_AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PUBLIC_AWS_POOL_ID: ${{ secrets.PUBLIC_AWS_POOL_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PUBLIC_FACEBOOK_PIXEL_ID: ${{ secrets.PUBLIC_FACEBOOK_PIXEL_ID }}
  PUBLIC_PRISM_ACCESS_TOKEN: ${{ secrets.PUBLIC_PRISM_ACCESS_TOKEN }}
  PUBLIC_GOOGLE_MEASUREMENT_ID: ${{ secrets.PUBLIC_GOOGLE_MEASUREMENT_ID }}
  AWS_DOCUMENT_REPORT_BUCKETS: ${{ secrets.AWS_DOCUMENT_REPORT_BUCKETS }}
  PUBLIC_GOOGLE_TAG_MANAGER_ID: ${{ secrets.PUBLIC_GOOGLE_TAG_MANAGER_ID }}
  PUBLIC_AGENT_RECRUITMENT_URL: ${{ secrets.PUBLIC_AGENT_RECRUITMENT_URL }}
  PUBLIC_STORE_FRONT_URL: ${{ secrets.PUBLIC_STORE_FRONT_URL }}
  PRISMIC_WEBHOOK_SECRET: ${{ secrets.PRISMIC_WEBHOOK_SECRET }}
  AMPLIFY_WEBHOOK_URL: ${{ secrets.AMPLIFY_WEBHOOK_URL }}
  GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  build:
    environment: dev
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/yarn.lock
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Checks with Astro
        run: ${{ steps.detect-package-manager.outputs.runner }} astro check && tsc --noEmit --project tsconfig.json
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SanctuaryBundle
          path: ${{ env.BUILD_PATH }}/dist
  deploy:
    environment: dev
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
    - uses: actions/checkout@v4
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: SanctuaryBundle
        path: ${{ env.BUILD_PATH }}/dist
    - name: Deploy to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
